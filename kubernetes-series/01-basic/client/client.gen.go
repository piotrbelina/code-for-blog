// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Todo defines model for Todo.
type Todo struct {
	Id    *openapi_types.UUID `json:"id,omitempty"`
	Title string              `json:"title"`
}

// IdParam defines model for idParam.
type IdParam = openapi_types.UUID

// PostTodoJSONRequestBody defines body for PostTodo for application/json ContentType.
type PostTodoJSONRequestBody = Todo

// PutTodoJSONRequestBody defines body for PutTodo for application/json ContentType.
type PutTodoJSONRequestBody = Todo

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetTodos request
	GetTodos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTodoWithBody request with any body
	PostTodoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTodo(ctx context.Context, body PostTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTodo request
	DeleteTodo(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTodo request
	GetTodo(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTodoWithBody request with any body
	PutTodoWithBody(ctx context.Context, id IdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTodo(ctx context.Context, id IdParam, body PutTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetTodos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTodosRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTodoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTodoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTodo(ctx context.Context, body PostTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTodoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTodo(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTodoRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTodo(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTodoRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTodoWithBody(ctx context.Context, id IdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTodoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTodo(ctx context.Context, id IdParam, body PutTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTodoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetTodosRequest generates requests for GetTodos
func NewGetTodosRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTodoRequest calls the generic PostTodo builder with application/json body
func NewPostTodoRequest(server string, body PostTodoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTodoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTodoRequestWithBody generates requests for PostTodo with any type of body
func NewPostTodoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTodoRequest generates requests for DeleteTodo
func NewDeleteTodoRequest(server string, id IdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTodoRequest generates requests for GetTodo
func NewGetTodoRequest(server string, id IdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTodoRequest calls the generic PutTodo builder with application/json body
func NewPutTodoRequest(server string, id IdParam, body PutTodoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTodoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTodoRequestWithBody generates requests for PutTodo with any type of body
func NewPutTodoRequestWithBody(server string, id IdParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetTodosWithResponse request
	GetTodosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTodosResponse, error)

	// PostTodoWithBodyWithResponse request with any body
	PostTodoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTodoResponse, error)

	PostTodoWithResponse(ctx context.Context, body PostTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTodoResponse, error)

	// DeleteTodoWithResponse request
	DeleteTodoWithResponse(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*DeleteTodoResponse, error)

	// GetTodoWithResponse request
	GetTodoWithResponse(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*GetTodoResponse, error)

	// PutTodoWithBodyWithResponse request with any body
	PutTodoWithBodyWithResponse(ctx context.Context, id IdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTodoResponse, error)

	PutTodoWithResponse(ctx context.Context, id IdParam, body PutTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTodoResponse, error)
}

type GetTodosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Todo
}

// Status returns HTTPResponse.Status
func (r GetTodosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTodosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTodoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Todo
}

// Status returns HTTPResponse.Status
func (r PostTodoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTodoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTodoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTodoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTodoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTodoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Todo
}

// Status returns HTTPResponse.Status
func (r GetTodoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTodoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTodoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTodoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTodoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetTodosWithResponse request returning *GetTodosResponse
func (c *ClientWithResponses) GetTodosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTodosResponse, error) {
	rsp, err := c.GetTodos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTodosResponse(rsp)
}

// PostTodoWithBodyWithResponse request with arbitrary body returning *PostTodoResponse
func (c *ClientWithResponses) PostTodoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTodoResponse, error) {
	rsp, err := c.PostTodoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTodoResponse(rsp)
}

func (c *ClientWithResponses) PostTodoWithResponse(ctx context.Context, body PostTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTodoResponse, error) {
	rsp, err := c.PostTodo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTodoResponse(rsp)
}

// DeleteTodoWithResponse request returning *DeleteTodoResponse
func (c *ClientWithResponses) DeleteTodoWithResponse(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*DeleteTodoResponse, error) {
	rsp, err := c.DeleteTodo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTodoResponse(rsp)
}

// GetTodoWithResponse request returning *GetTodoResponse
func (c *ClientWithResponses) GetTodoWithResponse(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*GetTodoResponse, error) {
	rsp, err := c.GetTodo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTodoResponse(rsp)
}

// PutTodoWithBodyWithResponse request with arbitrary body returning *PutTodoResponse
func (c *ClientWithResponses) PutTodoWithBodyWithResponse(ctx context.Context, id IdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTodoResponse, error) {
	rsp, err := c.PutTodoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTodoResponse(rsp)
}

func (c *ClientWithResponses) PutTodoWithResponse(ctx context.Context, id IdParam, body PutTodoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTodoResponse, error) {
	rsp, err := c.PutTodo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTodoResponse(rsp)
}

// ParseGetTodosResponse parses an HTTP response from a GetTodosWithResponse call
func ParseGetTodosResponse(rsp *http.Response) (*GetTodosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTodosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Todo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTodoResponse parses an HTTP response from a PostTodoWithResponse call
func ParsePostTodoResponse(rsp *http.Response) (*PostTodoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTodoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Todo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTodoResponse parses an HTTP response from a DeleteTodoWithResponse call
func ParseDeleteTodoResponse(rsp *http.Response) (*DeleteTodoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTodoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTodoResponse parses an HTTP response from a GetTodoWithResponse call
func ParseGetTodoResponse(rsp *http.Response) (*GetTodoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTodoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Todo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTodoResponse parses an HTTP response from a PutTodoWithResponse call
func ParsePutTodoResponse(rsp *http.Response) (*PutTodoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTodoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
